//todo: consent mode debugging/check: https://developers.google.com/tag-platform/devguides/consent-debugging
import { getConsentCookie, isValidConsentCookie } from './cookie-functions';
import { toOutcode } from './postcode';
function gtag(command, ...args) {
    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push(arguments);
}
let GaMeasurementId = '';
//todo: use prototype? (or class?)
// (having an object (prototype/class) will ensure that GaMeasurementId will have already been set)
export default function initAnalytics(gaMeasurementId) {
    // if the environment doesn't have a measurement id, don't load analytics
    if (!Boolean(gaMeasurementId)) {
        return;
    }
    GaMeasurementId = gaMeasurementId;
    setDefaultConsent();
    loadGaScript(gaMeasurementId);
    gtag('js', new Date());
    const pageViewParams = getPiiSafePageView(gaMeasurementId);
    // set the config for auto generated events other than page_view
    gtag('config', gaMeasurementId, {
        send_page_view: false, //disable auto page_view measurement
        page_path: pageViewParams.page_path,
        page_location: pageViewParams.page_location,
        page_referrer: pageViewParams.referrer,
        cookie_flags: 'secure'
    });
    const userConsent = getConsentCookie();
    if (userConsent && isValidConsentCookie(userConsent) && userConsent.analytics) {
        updateAnalyticsStorageConsent(true);
    }
    sendPageViewEvent();
    sendFilterPageCustomEvent();
}
function setDefaultConsent() {
    gtag('consent', 'default', {
        'analytics_storage': 'denied'
    });
    gtag('set', 'url_passthrough', true);
}
export function updateAnalyticsStorageConsent(granted, delayMs) {
    let options = {
        'analytics_storage': granted ? 'granted' : 'denied'
    };
    if (typeof delayMs !== 'undefined') {
        options['wait_for_update'] = delayMs;
    }
    gtag('consent', 'update', options);
}
export function sendPageViewEvent() {
    // send the page_view event manually (https://developers.google.com/analytics/devguides/collection/gtagjs/pages#default_behavior)
    gtag('event', 'page_view', getPiiSafePageView(GaMeasurementId));
}
export function sendFilterPageCustomEvent() {
    //todo: make filter page only
    const element = document.getElementById('results');
    const totalResults = element === null || element === void 0 ? void 0 : element.getAttribute('data-total-results');
    if (totalResults === undefined)
        return;
    gtag('event', 'filter_page', {
        'total_results': totalResults
    });
}
export function sendAnalyticsCustomEvent(accepted, source) {
    gtag('event', 'analytics', {
        'accepted': accepted,
        'source': source
    });
}
function loadGaScript(gaMeasurementId) {
    const f = document.getElementsByTagName('script')[0];
    const j = document.createElement('script');
    j.async = true;
    j.src = 'https://www.googletagmanager.com/gtag/js?id=' + gaMeasurementId;
    f.parentNode.insertBefore(j, f);
}
function getPiiSafePageView(gaMeasurementId) {
    const pageView = {
        page_title: document.title,
        send_to: gaMeasurementId,
        referrer: '',
        page_location: '',
        page_path: ''
    };
    //todo: set as referrer or page_referrer in pageView - does it matter? is it only picking it up from the config?
    //todo: get piisafe referrer function
    if (document.referrer !== '') {
        const referrerUrl = new URL(document.referrer);
        const piiSafeReferrerQueryString = getPiiSafeQueryString(referrerUrl.search);
        if (piiSafeReferrerQueryString == null) {
            pageView.referrer = document.referrer;
        }
        else {
            const urlArray = document.referrer.split('?');
            pageView.referrer = urlArray[0] + piiSafeReferrerQueryString;
        }
    }
    const piiSafeQueryString = getPiiSafeQueryString(window.location.search);
    if (piiSafeQueryString == null) {
        pageView.page_location = window.location.href;
        pageView.page_path = window.location.pathname + window.location.search;
        return pageView;
    }
    const urlArray = window.location.href.split('?');
    pageView.page_location = urlArray[0] + piiSafeQueryString;
    pageView.page_path = window.location.pathname + piiSafeQueryString;
    return pageView;
}
function getPiiSafeQueryString(queryString) {
    //todo: for safety, convert to lowercase, so that if the user changes the case of the url, we still don't collect pii
    const queryParams = new URLSearchParams(queryString);
    let postcode = queryParams.get('postcode');
    if (postcode == null) {
        // null indicates original query params were already pii safe
        return null;
    }
    postcode = toOutcode(postcode);
    queryParams.set('postcode', postcode);
    queryParams.delete('latitude');
    queryParams.delete('longitude');
    return '?' + queryParams.toString();
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYW5hbHl0aWNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDRHQUE0RztBQUU1RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUMzRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRXRDLFNBQVMsSUFBSSxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVc7SUFDekMsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRUQsSUFBSSxlQUFlLEdBQVcsRUFBRSxDQUFDO0FBRWpDLGtDQUFrQztBQUNsQyxtR0FBbUc7QUFDbkcsTUFBTSxDQUFDLE9BQU8sVUFBVSxhQUFhLENBQUMsZUFBdUI7SUFFekQseUVBQXlFO0lBQ3pFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUM1QixPQUFPO0lBQ1gsQ0FBQztJQUVELGVBQWUsR0FBRyxlQUFlLENBQUM7SUFFbEMsaUJBQWlCLEVBQUUsQ0FBQztJQUVwQixZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7SUFFOUIsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFFdkIsTUFBTSxjQUFjLEdBQUcsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFFM0QsZ0VBQWdFO0lBQ2hFLElBQUksQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFO1FBQzVCLGNBQWMsRUFBRSxLQUFLLEVBQUUsb0NBQW9DO1FBQzNELFNBQVMsRUFBRSxjQUFjLENBQUMsU0FBUztRQUNuQyxhQUFhLEVBQUUsY0FBYyxDQUFDLGFBQWE7UUFDM0MsYUFBYSxFQUFFLGNBQWMsQ0FBQyxRQUFRO1FBQ3RDLFlBQVksRUFBRSxRQUFRO0tBQ3pC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LHFIQUFxSDtJQUNySCxNQUFNLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVyRCxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLElBQUksUUFBUSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ25CLDZEQUE2RDtRQUM3RCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0QyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFaEMsT0FBTyxHQUFHLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3hDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9hbmFseXRpY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vdG9kbzogY29uc2VudCBtb2RlIGRlYnVnZ2luZy9jaGVjazogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vdGFnLXBsYXRmb3JtL2Rldmd1aWRlcy9jb25zZW50LWRlYnVnZ2luZ1xuXG5pbXBvcnQgeyBnZXRDb25zZW50Q29va2llLCBpc1ZhbGlkQ29uc2VudENvb2tpZSB9IGZyb20gJy4vY29va2llLWZ1bmN0aW9ucydcbmltcG9ydCB7IHRvT3V0Y29kZSB9IGZyb20gJy4vcG9zdGNvZGUnXG5cbmZ1bmN0aW9uIGd0YWcoY29tbWFuZDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIHdpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdO1xuICAgIHdpbmRvdy5kYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO1xufVxuXG5sZXQgR2FNZWFzdXJlbWVudElkOiBzdHJpbmcgPSAnJztcblxuLy90b2RvOiB1c2UgcHJvdG90eXBlPyAob3IgY2xhc3M/KVxuLy8gKGhhdmluZyBhbiBvYmplY3QgKHByb3RvdHlwZS9jbGFzcykgd2lsbCBlbnN1cmUgdGhhdCBHYU1lYXN1cmVtZW50SWQgd2lsbCBoYXZlIGFscmVhZHkgYmVlbiBzZXQpXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0QW5hbHl0aWNzKGdhTWVhc3VyZW1lbnRJZDogc3RyaW5nKSB7XG5cbiAgICAvLyBpZiB0aGUgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIGEgbWVhc3VyZW1lbnQgaWQsIGRvbid0IGxvYWQgYW5hbHl0aWNzXG4gICAgaWYgKCFCb29sZWFuKGdhTWVhc3VyZW1lbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIEdhTWVhc3VyZW1lbnRJZCA9IGdhTWVhc3VyZW1lbnRJZDtcblxuICAgIHNldERlZmF1bHRDb25zZW50KCk7XG5cbiAgICBsb2FkR2FTY3JpcHQoZ2FNZWFzdXJlbWVudElkKTtcblxuICAgIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7XG5cbiAgICBjb25zdCBwYWdlVmlld1BhcmFtcyA9IGdldFBpaVNhZmVQYWdlVmlldyhnYU1lYXN1cmVtZW50SWQpO1xuXG4gICAgLy8gc2V0IHRoZSBjb25maWcgZm9yIGF1dG8gZ2VuZXJhdGVkIGV2ZW50cyBvdGhlciB0aGFuIHBhZ2Vfdmlld1xuICAgIGd0YWcoJ2NvbmZpZycsIGdhTWVhc3VyZW1lbnRJZCwge1xuICAgICAgICBzZW5kX3BhZ2VfdmlldzogZmFsc2UsIC8vZGlzYWJsZSBhdXRvIHBhZ2VfdmlldyBtZWFzdXJlbWVudFxuICAgICAgICBwYWdlX3BhdGg6IHBhZ2VWaWV3UGFyYW1zLnBhZ2VfcGF0aCxcbiAgICAgICAgcGFnZV9sb2NhdGlvbjogcGFnZVZpZXdQYXJhbXMucGFnZV9sb2NhdGlvbixcbiAgICAgICAgcGFnZV9yZWZlcnJlcjogcGFnZVZpZXdQYXJhbXMucmVmZXJyZXIsXG4gICAgICAgIGNvb2tpZV9mbGFnczogJ3NlY3VyZSdcbiAgICB9KTtcblxuICAgIGNvbnN0IHVzZXJDb25zZW50ID0gZ2V0Q29uc2VudENvb2tpZSgpO1xuICAgIGlmICh1c2VyQ29uc2VudCAmJiBpc1ZhbGlkQ29uc2VudENvb2tpZSh1c2VyQ29uc2VudCkgJiYgdXNlckNvbnNlbnQuYW5hbHl0aWNzKSB7XG4gICAgICAgIHVwZGF0ZUFuYWx5dGljc1N0b3JhZ2VDb25zZW50KHRydWUpO1xuICAgIH1cblxuICAgIHNlbmRQYWdlVmlld0V2ZW50KCk7XG4gICAgc2VuZEZpbHRlclBhZ2VDdXN0b21FdmVudCgpO1xufVxuXG5mdW5jdGlvbiBzZXREZWZhdWx0Q29uc2VudCgpIHtcbiAgICBndGFnKCdjb25zZW50JywgJ2RlZmF1bHQnLCB7XG4gICAgICAgICdhbmFseXRpY3Nfc3RvcmFnZSc6ICdkZW5pZWQnXG4gICAgfSk7XG5cbiAgICBndGFnKCdzZXQnLCAndXJsX3Bhc3N0aHJvdWdoJywgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBbmFseXRpY3NTdG9yYWdlQ29uc2VudChncmFudGVkOiBib29sZWFuLCBkZWxheU1zPzogbnVtYmVyKSB7XG5cbiAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgJ2FuYWx5dGljc19zdG9yYWdlJzogZ3JhbnRlZCA/ICdncmFudGVkJyA6ICdkZW5pZWQnXG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgZGVsYXlNcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9uc1snd2FpdF9mb3JfdXBkYXRlJ10gPSBkZWxheU1zO1xuICAgIH1cblxuICAgIGd0YWcoJ2NvbnNlbnQnLCAndXBkYXRlJywgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kUGFnZVZpZXdFdmVudCgpIHtcbiAgICAvLyBzZW5kIHRoZSBwYWdlX3ZpZXcgZXZlbnQgbWFudWFsbHkgKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9ndGFnanMvcGFnZXMjZGVmYXVsdF9iZWhhdmlvcilcbiAgICBndGFnKCdldmVudCcsICdwYWdlX3ZpZXcnLCBnZXRQaWlTYWZlUGFnZVZpZXcoR2FNZWFzdXJlbWVudElkKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kRmlsdGVyUGFnZUN1c3RvbUV2ZW50KCkge1xuICAgIC8vdG9kbzogbWFrZSBmaWx0ZXIgcGFnZSBvbmx5XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN1bHRzJyk7XG4gICAgY29uc3QgdG90YWxSZXN1bHRzID0gZWxlbWVudD8uZ2V0QXR0cmlidXRlKCdkYXRhLXRvdGFsLXJlc3VsdHMnKTtcbiAgICBpZiAodG90YWxSZXN1bHRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcblxuICAgIGd0YWcoJ2V2ZW50JywgJ2ZpbHRlcl9wYWdlJywge1xuICAgICAgICAndG90YWxfcmVzdWx0cyc6IHRvdGFsUmVzdWx0c1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VuZEFuYWx5dGljc0N1c3RvbUV2ZW50KGFjY2VwdGVkOiBib29sZWFuLCBzb3VyY2U6IHN0cmluZykge1xuXG4gICAgZ3RhZygnZXZlbnQnLCAnYW5hbHl0aWNzJywge1xuICAgICAgICAnYWNjZXB0ZWQnOiBhY2NlcHRlZCxcbiAgICAgICAgJ3NvdXJjZSc6IHNvdXJjZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkR2FTY3JpcHQoZ2FNZWFzdXJlbWVudElkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgIGNvbnN0IGogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBqLmFzeW5jID0gdHJ1ZTtcbiAgICBqLnNyYyA9ICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPScgKyBnYU1lYXN1cmVtZW50SWQ7XG4gICAgZi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLCBmKTtcbn1cblxuZnVuY3Rpb24gZ2V0UGlpU2FmZVBhZ2VWaWV3KGdhTWVhc3VyZW1lbnRJZDogc3RyaW5nKSB7XG5cbiAgICBjb25zdCBwYWdlVmlldyA9IHtcbiAgICAgICAgcGFnZV90aXRsZTogZG9jdW1lbnQudGl0bGUsXG4gICAgICAgIHNlbmRfdG86IGdhTWVhc3VyZW1lbnRJZCxcbiAgICAgICAgcmVmZXJyZXI6ICcnLFxuICAgICAgICBwYWdlX2xvY2F0aW9uOiAnJyxcbiAgICAgICAgcGFnZV9wYXRoOiAnJ1xuICAgIH07XG5cbiAgICAvL3RvZG86IHNldCBhcyByZWZlcnJlciBvciBwYWdlX3JlZmVycmVyIGluIHBhZ2VWaWV3IC0gZG9lcyBpdCBtYXR0ZXI/IGlzIGl0IG9ubHkgcGlja2luZyBpdCB1cCBmcm9tIHRoZSBjb25maWc/XG4gICAgLy90b2RvOiBnZXQgcGlpc2FmZSByZWZlcnJlciBmdW5jdGlvblxuICAgIGlmIChkb2N1bWVudC5yZWZlcnJlciAhPT0gJycpIHtcbiAgICAgICAgY29uc3QgcmVmZXJyZXJVcmwgPSBuZXcgVVJMKGRvY3VtZW50LnJlZmVycmVyKTtcbiAgICAgICAgY29uc3QgcGlpU2FmZVJlZmVycmVyUXVlcnlTdHJpbmcgPSBnZXRQaWlTYWZlUXVlcnlTdHJpbmcocmVmZXJyZXJVcmwuc2VhcmNoKTtcbiAgICAgICAgaWYgKHBpaVNhZmVSZWZlcnJlclF1ZXJ5U3RyaW5nID09IG51bGwpIHtcbiAgICAgICAgICAgIHBhZ2VWaWV3LnJlZmVycmVyID0gZG9jdW1lbnQucmVmZXJyZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB1cmxBcnJheSA9IGRvY3VtZW50LnJlZmVycmVyLnNwbGl0KCc/Jyk7XG5cbiAgICAgICAgICAgIHBhZ2VWaWV3LnJlZmVycmVyID0gdXJsQXJyYXlbMF0gKyBwaWlTYWZlUmVmZXJyZXJRdWVyeVN0cmluZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBpaVNhZmVRdWVyeVN0cmluZyA9IGdldFBpaVNhZmVRdWVyeVN0cmluZyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcblxuICAgIGlmIChwaWlTYWZlUXVlcnlTdHJpbmcgPT0gbnVsbCkge1xuICAgICAgICBwYWdlVmlldy5wYWdlX2xvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgIHBhZ2VWaWV3LnBhZ2VfcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VWaWV3O1xuICAgIH1cblxuICAgIGNvbnN0IHVybEFycmF5ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJz8nKTtcblxuICAgIHBhZ2VWaWV3LnBhZ2VfbG9jYXRpb24gPSB1cmxBcnJheVswXSArIHBpaVNhZmVRdWVyeVN0cmluZztcbiAgICBwYWdlVmlldy5wYWdlX3BhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyBwaWlTYWZlUXVlcnlTdHJpbmc7XG5cbiAgICByZXR1cm4gcGFnZVZpZXc7XG59XG5cbmZ1bmN0aW9uIGdldFBpaVNhZmVRdWVyeVN0cmluZyhxdWVyeVN0cmluZzogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG5cbiAgICAvL3RvZG86IGZvciBzYWZldHksIGNvbnZlcnQgdG8gbG93ZXJjYXNlLCBzbyB0aGF0IGlmIHRoZSB1c2VyIGNoYW5nZXMgdGhlIGNhc2Ugb2YgdGhlIHVybCwgd2Ugc3RpbGwgZG9uJ3QgY29sbGVjdCBwaWlcbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlTdHJpbmcpO1xuXG4gICAgbGV0IHBvc3Rjb2RlID0gcXVlcnlQYXJhbXMuZ2V0KCdwb3N0Y29kZScpO1xuICAgIGlmIChwb3N0Y29kZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIG51bGwgaW5kaWNhdGVzIG9yaWdpbmFsIHF1ZXJ5IHBhcmFtcyB3ZXJlIGFscmVhZHkgcGlpIHNhZmVcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcG9zdGNvZGUgPSB0b091dGNvZGUocG9zdGNvZGUpO1xuICAgIHF1ZXJ5UGFyYW1zLnNldCgncG9zdGNvZGUnLCBwb3N0Y29kZSk7XG4gICAgcXVlcnlQYXJhbXMuZGVsZXRlKCdsYXRpdHVkZScpO1xuICAgIHF1ZXJ5UGFyYW1zLmRlbGV0ZSgnbG9uZ2l0dWRlJyk7XG5cbiAgICByZXR1cm4gJz8nICsgcXVlcnlQYXJhbXMudG9TdHJpbmcoKTtcbn1cbiJdfQ==
