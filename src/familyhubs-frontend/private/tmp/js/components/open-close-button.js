//todo: make it a standard govuk module?
//import { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'
/*todo: rename fh-open-close-target-user-opened fh-open-close-target-open-non-desktop or somesuch */
export class OpenCloseButton {
    constructor(openCloseButton) {
        //super();
        //if (!(openCloseButton instanceof HTMLButtonElement)) {
        //}
        this.openCloseButton = openCloseButton;
        const targetId = this.openCloseButton.getAttribute('data-open-close-mobile');
        this.target = document.getElementById(targetId);
        this.showText = this.openCloseButton.textContent;
        this.hideText = this.openCloseButton.getAttribute('data-open-close-mobile-hide');
        this.target.classList.add('fh-open-close-target');
        let defaultTargetVisibility = this.openCloseButton.getAttribute('data-open-close-mobile-default');
        if (defaultTargetVisibility === "hide") {
            this.hideTarget();
        }
        else {
            this.showTarget();
        }
        this.openCloseButton.addEventListener('click', (event) => this.handleClick(event));
    }
    handleClick(event) {
        if (this.target.classList.contains('fh-open-close-target-user-opened')) {
            this.hideTarget();
        }
        else {
            this.showTarget();
        }
    }
    showTarget() {
        if (this.target) {
            if (!this.target.classList.contains('fh-open-close-target-user-opened')) {
                this.target.classList.add('fh-open-close-target-user-opened');
            }
        }
        if (this.hideText) {
            this.openCloseButton.textContent = this.hideText;
        }
    }
    hideTarget() {
        if (this.target) {
            this.target.classList.remove('fh-open-close-target-user-opened');
        }
        if (this.showText) {
            this.openCloseButton.textContent = this.showText;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvb3Blbi1jbG9zZS1idXR0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBQ3hDLDZFQUE2RTtBQUU3RSxvR0FBb0c7QUFFcEcsTUFBTSxPQUFPLGVBQWU7SUFPeEIsWUFBWSxlQUFrQztRQUMxQyxVQUFVO1FBRVYsd0RBQXdEO1FBQ3hELEdBQUc7UUFFSCxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFTLENBQXVCLENBQUM7UUFFdkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFFakYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFbEQsSUFBSSx1QkFBdUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ2xHLElBQUksdUJBQXVCLEtBQUssTUFBTSxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7YUFBTSxDQUFDO1lBQ0osSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBWTtRQUNwQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFLENBQUM7WUFDckUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7YUFBTSxDQUFDO1lBQ0osSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFLENBQUM7Z0JBQ3RFLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1lBQ2xFLENBQUM7UUFDTCxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNyRCxDQUFDO0lBQ0wsQ0FBQztJQUNELFVBQVU7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3JELENBQUM7SUFDTCxDQUFDO0NBS0oiLCJmaWxlIjoiY29tcG9uZW50cy9vcGVuLWNsb3NlLWJ1dHRvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vdG9kbzogbWFrZSBpdCBhIHN0YW5kYXJkIGdvdnVrIG1vZHVsZT9cclxuLy9pbXBvcnQgeyBHT1ZVS0Zyb250ZW5kQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZ292dWstZnJvbnRlbmQtY29tcG9uZW50Lm1qcydcclxuXHJcbi8qdG9kbzogcmVuYW1lIGZoLW9wZW4tY2xvc2UtdGFyZ2V0LXVzZXItb3BlbmVkIGZoLW9wZW4tY2xvc2UtdGFyZ2V0LW9wZW4tbm9uLWRlc2t0b3Agb3Igc29tZXN1Y2ggKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBPcGVuQ2xvc2VCdXR0b24geyAvLyBleHRlbmRzIEdPVlVLRnJvbnRlbmRDb21wb25lbnQge1xyXG5cclxuICAgIG9wZW5DbG9zZUJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICB0YXJnZXQ6IEhUTUxFbGVtZW50IHwgbnVsbDtcclxuICAgIHNob3dUZXh0OiBzdHJpbmcgfCBudWxsO1xyXG4gICAgaGlkZVRleHQ6IHN0cmluZyB8IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3BlbkNsb3NlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCkge1xyXG4gICAgICAgIC8vc3VwZXIoKTtcclxuXHJcbiAgICAgICAgLy9pZiAoIShvcGVuQ2xvc2VCdXR0b24gaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCkpIHtcclxuICAgICAgICAvL31cclxuXHJcbiAgICAgICAgdGhpcy5vcGVuQ2xvc2VCdXR0b24gPSBvcGVuQ2xvc2VCdXR0b247XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0SWQgPSB0aGlzLm9wZW5DbG9zZUJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3Blbi1jbG9zZS1tb2JpbGUnKTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldElkISkgYXMgSFRNTEVsZW1lbnQgfCBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLnNob3dUZXh0ID0gdGhpcy5vcGVuQ2xvc2VCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5oaWRlVGV4dCA9IHRoaXMub3BlbkNsb3NlQnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1vcGVuLWNsb3NlLW1vYmlsZS1oaWRlJyk7XHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ZoLW9wZW4tY2xvc2UtdGFyZ2V0Jyk7XHJcblxyXG4gICAgICAgIGxldCBkZWZhdWx0VGFyZ2V0VmlzaWJpbGl0eSA9IHRoaXMub3BlbkNsb3NlQnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1vcGVuLWNsb3NlLW1vYmlsZS1kZWZhdWx0Jyk7XHJcbiAgICAgICAgaWYgKGRlZmF1bHRUYXJnZXRWaXNpYmlsaXR5ID09PSBcImhpZGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVUYXJnZXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dUYXJnZXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub3BlbkNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUNsaWNrKGV2ZW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmgtb3Blbi1jbG9zZS10YXJnZXQtdXNlci1vcGVuZWQnKSkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVUYXJnZXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dUYXJnZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd1RhcmdldCgpIHtcclxuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZoLW9wZW4tY2xvc2UtdGFyZ2V0LXVzZXItb3BlbmVkJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ZoLW9wZW4tY2xvc2UtdGFyZ2V0LXVzZXItb3BlbmVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGlkZVRleHQpIHtcclxuICAgICAgICAgICAgdGhpcy5vcGVuQ2xvc2VCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLmhpZGVUZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhpZGVUYXJnZXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2ZoLW9wZW4tY2xvc2UtdGFyZ2V0LXVzZXItb3BlbmVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNob3dUZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbkNsb3NlQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5zaG93VGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE5hbWUgZm9yIHRoZSBjb21wb25lbnQgdXNlZCB3aGVuIGluaXRpYWxpc2luZyB1c2luZyBkYXRhLW1vZHVsZSBhdHRyaWJ1dGVzLlxyXG4gICAgICovXHJcbi8qICAgIHN0YXRpYyBtb2R1bGVOYW1lID0gJ29wZW4tY2xvc2UtYnV0dG9uJzsqL1xyXG59XHJcbiJdfQ==
