//todo: make it a standard govuk module?
//import { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'
/*todo: rename fh-open-close-target-user-opened fh-open-close-target-open-non-desktop or somesuch */
export class OpenCloseButton {
    constructor(openCloseButton) {
        //super();
        //if (!(openCloseButton instanceof HTMLButtonElement)) {
        //}
        this.openCloseButton = openCloseButton;
        const targetId = this.openCloseButton.getAttribute('data-open-close-mobile');
        this.target = document.getElementById(targetId);
        this.showText = this.openCloseButton.textContent;
        this.hideText = this.openCloseButton.getAttribute('data-open-close-mobile-hide');
        this.target.classList.add('fh-open-close-target');
        let defaultTargetVisibility = this.openCloseButton.getAttribute('data-open-close-mobile-default');
        if (defaultTargetVisibility === "hide") {
            this.hideTarget();
        }
        else {
            this.showTarget();
        }
        this.openCloseButton.addEventListener('click', (event) => this.handleClick(event));
    }
    handleClick(event) {
        if (this.target.classList.contains('fh-open-close-target-user-opened')) {
            this.hideTarget();
        }
        else {
            this.showTarget();
        }
    }
    showTarget() {
        if (this.target) {
            if (!this.target.classList.contains('fh-open-close-target-user-opened')) {
                this.target.classList.add('fh-open-close-target-user-opened');
            }
        }
        if (this.hideText) {
            this.openCloseButton.textContent = this.hideText;
        }
    }
    hideTarget() {
        if (this.target) {
            this.target.classList.remove('fh-open-close-target-user-opened');
        }
        if (this.showText) {
            this.openCloseButton.textContent = this.showText;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvb3Blbi1jbG9zZS1idXR0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBQ3hDLDZFQUE2RTtBQUU3RSxvR0FBb0c7QUFFcEcsTUFBTSxPQUFPLGVBQWU7SUFPeEIsWUFBWSxlQUFrQztRQUMxQyxVQUFVO1FBRVYsd0RBQXdEO1FBQ3hELEdBQUc7UUFFSCxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFTLENBQXVCLENBQUM7UUFFdkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFFakYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFbEQsSUFBSSx1QkFBdUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ2xHLElBQUksdUJBQXVCLEtBQUssTUFBTSxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7YUFBTSxDQUFDO1lBQ0osSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBWTtRQUNwQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFLENBQUM7WUFDckUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7YUFBTSxDQUFDO1lBQ0osSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFLENBQUM7Z0JBQ3RFLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1lBQ2xFLENBQUM7UUFDTCxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNyRCxDQUFDO0lBQ0wsQ0FBQztJQUNELFVBQVU7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3JELENBQUM7SUFDTCxDQUFDO0NBS0oiLCJmaWxlIjoiY29tcG9uZW50cy9vcGVuLWNsb3NlLWJ1dHRvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vdG9kbzogbWFrZSBpdCBhIHN0YW5kYXJkIGdvdnVrIG1vZHVsZT9cbi8vaW1wb3J0IHsgR09WVUtGcm9udGVuZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2dvdnVrLWZyb250ZW5kLWNvbXBvbmVudC5tanMnXG5cbi8qdG9kbzogcmVuYW1lIGZoLW9wZW4tY2xvc2UtdGFyZ2V0LXVzZXItb3BlbmVkIGZoLW9wZW4tY2xvc2UtdGFyZ2V0LW9wZW4tbm9uLWRlc2t0b3Agb3Igc29tZXN1Y2ggKi9cblxuZXhwb3J0IGNsYXNzIE9wZW5DbG9zZUJ1dHRvbiB7IC8vIGV4dGVuZHMgR09WVUtGcm9udGVuZENvbXBvbmVudCB7XG5cbiAgICBvcGVuQ2xvc2VCdXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHRhcmdldDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICAgIHNob3dUZXh0OiBzdHJpbmcgfCBudWxsO1xuICAgIGhpZGVUZXh0OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgY29uc3RydWN0b3Iob3BlbkNsb3NlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCkge1xuICAgICAgICAvL3N1cGVyKCk7XG5cbiAgICAgICAgLy9pZiAoIShvcGVuQ2xvc2VCdXR0b24gaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCkpIHtcbiAgICAgICAgLy99XG5cbiAgICAgICAgdGhpcy5vcGVuQ2xvc2VCdXR0b24gPSBvcGVuQ2xvc2VCdXR0b247XG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gdGhpcy5vcGVuQ2xvc2VCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLW9wZW4tY2xvc2UtbW9iaWxlJyk7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0SWQhKSBhcyBIVE1MRWxlbWVudCB8IG51bGw7XG5cbiAgICAgICAgdGhpcy5zaG93VGV4dCA9IHRoaXMub3BlbkNsb3NlQnV0dG9uLnRleHRDb250ZW50O1xuICAgICAgICB0aGlzLmhpZGVUZXh0ID0gdGhpcy5vcGVuQ2xvc2VCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLW9wZW4tY2xvc2UtbW9iaWxlLWhpZGUnKTtcblxuICAgICAgICB0aGlzLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdmaC1vcGVuLWNsb3NlLXRhcmdldCcpO1xuXG4gICAgICAgIGxldCBkZWZhdWx0VGFyZ2V0VmlzaWJpbGl0eSA9IHRoaXMub3BlbkNsb3NlQnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1vcGVuLWNsb3NlLW1vYmlsZS1kZWZhdWx0Jyk7XG4gICAgICAgIGlmIChkZWZhdWx0VGFyZ2V0VmlzaWJpbGl0eSA9PT0gXCJoaWRlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZVRhcmdldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93VGFyZ2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wZW5DbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5oYW5kbGVDbGljayhldmVudCkpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrKGV2ZW50OiBFdmVudCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmaC1vcGVuLWNsb3NlLXRhcmdldC11c2VyLW9wZW5lZCcpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGVUYXJnZXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1RhcmdldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2hvd1RhcmdldCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmgtb3Blbi1jbG9zZS10YXJnZXQtdXNlci1vcGVuZWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2ZoLW9wZW4tY2xvc2UtdGFyZ2V0LXVzZXItb3BlbmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGlkZVRleHQpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkNsb3NlQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5oaWRlVGV4dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoaWRlVGFyZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2ZoLW9wZW4tY2xvc2UtdGFyZ2V0LXVzZXItb3BlbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2hvd1RleHQpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkNsb3NlQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5zaG93VGV4dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBOYW1lIGZvciB0aGUgY29tcG9uZW50IHVzZWQgd2hlbiBpbml0aWFsaXNpbmcgdXNpbmcgZGF0YS1tb2R1bGUgYXR0cmlidXRlcy5cbiAgICAgKi9cbi8qICAgIHN0YXRpYyBtb2R1bGVOYW1lID0gJ29wZW4tY2xvc2UtYnV0dG9uJzsqL1xufVxuIl19
