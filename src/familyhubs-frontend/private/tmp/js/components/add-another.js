// A version of the MOJ's add-another component what plays nice with the accessible autocomplete component.
// I did consider subclassing the MOJ's add-another component,
// but it would have been so coupled that it would've probably broken on an update of the MOJ library.
// So instead we forked it and made our own version.
window.FamilyHubsFrontend = window.FamilyHubsFrontend || {};
export function initializeAddAnother() {
    //todo: support options with scope?
    var $addAnothers = document.querySelectorAll('[data-module="fh-add-another"]');
    $addAnothers.forEach(function ($addAnother) {
        new window.FamilyHubsFrontend.AddAnother($addAnother);
    });
}
window.FamilyHubsFrontend.AddAnother = function (container) {
    this.container = $(container);
    this.callback = null;
    if (this.container.data('fh-add-another-initialised')) {
        return;
    }
    this.container.data('fh-add-another-initialised', true);
    this.container.on('click', '.fh-add-another__remove-button', $.proxy(this, 'onRemoveButtonClick'));
    this.container.on('click', '.fh-add-another__add-button', $.proxy(this, 'onAddButtonClick'));
    this.container.find('.fh-add-another__add-button, fh-add-another__remove-button').prop('type', 'button');
};
window.FamilyHubsFrontend.AddAnother.prototype.setCallback = function (callback) {
    this.callback = callback;
};
window.FamilyHubsFrontend.AddAnother.prototype.onAddButtonClick = function (e) {
    var item = this.getNewItem();
    //this.updateAttributes(this.getItems().length, item);
    this.resetItem(item);
    var firstItem = this.getItems().first();
    if (!this.hasRemoveButton(firstItem)) {
        this.createRemoveButton(firstItem);
    }
    this.getItems().last().after(item);
    item.find('input, textarea, select').first().focus();
};
window.FamilyHubsFrontend.AddAnother.prototype.hasRemoveButton = function (item) {
    return item.find('.fh-add-another__remove-button').length;
};
window.FamilyHubsFrontend.AddAnother.prototype.getItems = function () {
    return this.container.find('.fh-add-another__item');
};
window.FamilyHubsFrontend.AddAnother.prototype.getNewItem = function () {
    // get the first item and clone it
    const items = this.getItems();
    const item = items[0].cloneNode(true);
    // find the autocomplete wrappers and remove the elements that are added by accessible-autocomplete
    const autocompleteWrappers = item.querySelectorAll('.autocomplete__wrapper');
    autocompleteWrappers.forEach(wrapper => {
        if (wrapper.parentNode.parentNode) {
            wrapper.parentNode.parentNode.removeChild(wrapper.parentNode);
        }
    });
    //todo: need to handle name and id before enhancing the select elements
    //this.updateAttributes(this.getItems().length, item);
    var $item = $(item);
    this.updateAttributes(items.length, $item);
    // call the callback which needs to apply accessibility enhancements to the new item
    if (typeof this.callback === 'function') {
        this.callback(item);
    }
    //todo: this is just a poc, and will be replaced by the callback
    const languageSelects = item.querySelectorAll("[id^='language-']");
    languageSelects.forEach(select => {
        accessibleAutocomplete.enhanceSelectElement({
            name: 'languageName',
            defaultValue: '',
            selectElement: select
        });
    });
    // Create a remove button if it doesn't exist
    if (!this.hasRemoveButton($item)) {
        this.createRemoveButton($item);
    }
    return $item;
};
window.FamilyHubsFrontend.AddAnother.prototype.updateAttributes = function (index, item) {
    item.find('[data-name]').each(function (i, el) {
        var originalId = el.id;
        el.name = $(el).attr('data-name').replace(/%index%/, index);
        el.id = $(el).attr('data-id').replace(/%index%/, index);
        var label = $(el).siblings('label')[0] || $(el).parents('label')[0] || item.find('[for="' + originalId + '"]')[0];
        label.htmlFor = el.id;
    });
};
window.FamilyHubsFrontend.AddAnother.prototype.createRemoveButton = function (item) {
    item.append('<button type="button" class="govuk-button govuk-button--secondary fh-add-another__remove-button">Remove</button>');
};
window.FamilyHubsFrontend.AddAnother.prototype.resetItem = function (item) {
    // accessibile-autocomplete adds an input (without data-name or data-id)
    // so we blank all input controls
    item.find('input, textarea, select').each(function (index, el) {
        if (el.type == 'checkbox' || el.type == 'radio') {
            el.checked = false;
        }
        else {
            el.value = '';
        }
    });
};
window.FamilyHubsFrontend.AddAnother.prototype.onRemoveButtonClick = function (e) {
    $(e.currentTarget).parents('.fh-add-another__item').remove();
    var items = this.getItems();
    if (items.length === 1) {
        items.find('.fh-add-another__remove-button').remove();
    }
    items.each($.proxy(function (index, el) {
        this.updateAttributes(index, $(el));
    }, this));
    this.focusHeading();
};
window.FamilyHubsFrontend.AddAnother.prototype.focusHeading = function () {
    this.container.find('.fh-add-another__heading').focus();
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWRkLWFub3RoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkdBQTJHO0FBQzNHLDhEQUE4RDtBQUM5RCxzR0FBc0c7QUFDdEcsb0RBQW9EO0FBa0JwRCxNQUFNLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixJQUFJLEVBQUUsQ0FBQztBQUU1RCxNQUFNLFVBQVUsb0JBQW9CO0lBQ2hDLG1DQUFtQztJQUNuQyxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUUvRSxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsV0FBVztRQUM1QyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsR0FBRyxVQUFVLFNBQVM7SUFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFOUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFFckIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLENBQUM7UUFDdkQsT0FBTTtJQUNQLENBQUM7SUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUV4RCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ25HLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxD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QUMsZ0NBQWdDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2RCxDQUFDO0lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsS0FBSyxFQUFFLEVBQUU7UUFDckMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNWLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNyQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUc7SUFDN0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN6RCxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9hZGQtYW5vdGhlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEEgdmVyc2lvbiBvZiB0aGUgTU9KJ3MgYWRkLWFub3RoZXIgY29tcG9uZW50IHdoYXQgcGxheXMgbmljZSB3aXRoIHRoZSBhY2Nlc3NpYmxlIGF1dG9jb21wbGV0ZSBjb21wb25lbnQuXHJcbi8vIEkgZGlkIGNvbnNpZGVyIHN1YmNsYXNzaW5nIHRoZSBNT0oncyBhZGQtYW5vdGhlciBjb21wb25lbnQsXHJcbi8vIGJ1dCBpdCB3b3VsZCBoYXZlIGJlZW4gc28gY291cGxlZCB0aGF0IGl0IHdvdWxkJ3ZlIHByb2JhYmx5IGJyb2tlbiBvbiBhbiB1cGRhdGUgb2YgdGhlIE1PSiBsaWJyYXJ5LlxyXG4vLyBTbyBpbnN0ZWFkIHdlIGZvcmtlZCBpdCBhbmQgbWFkZSBvdXIgb3duIHZlcnNpb24uXHJcblxyXG4vL3RvZG86IHRoZSBjcmVhdGVkIGFjY2Vzc2libGUgIGlucHV0IHdoZW4gYWRkaW5nIGRvZXNuJ3QgaGF2ZSB0aGUgaWQvbmFtZSBkYXRhIGF0dHJzLCBzbyB3ZSBnZXQgZHVwZSBpZHNcclxuLy90b2RvOiB0aGVyZSBzZWVtcyB0byBiZSBhIGJ1ZyBpbiBhY2Nlc3NpYmxlLWF1dG9jb21wbGV0ZSB3aGVyZSB0aGUgaW5wdXQgaXQgY3JlYXRlcyBoYXMgdGhlIHNhbWUgaWQgYXMgdGhlIHNlbGVjdFxyXG4vL3RvZG86IHdlIG5lZWQgdG8gaW5pdGlhbGlzZSB0aGUgYWNjZXNzaWJsZSBhdXRvY29tcGxldGUgb24gdGhlIG5ldyBpdGVtXHJcbi8vdG9kbzogd2hlbiBlbmhhbmNpbmcgdGhlIHNlbGVjdCBpbiBhY2Nlc3NpYmxlLWF1dG9jb21wbGV0ZSwgaXQgcmV0dXJucyB0aGUgbmFtZSByYXRoZXIgdGhhbiB0aGUgdmFsdWVcclxuLy8gdGhlcmUncyBhIHdvcmthcm91bmQuLi5cclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FscGhhZ292L2FjY2Vzc2libGUtYXV0b2NvbXBsZXRlL2lzc3Vlcy8zODdcclxuLy8gYnV0IHdlIGNvdWxkIHdlIHJvbGwgaXQgaW50byBvdXIgYWRkLWFub3RoZXIgY29tcG9uZW50P1xyXG4vL3RvZG86IHdoZW4gYWNjZXNzaWJsZS1hdXRvY29tcGxldGUgY3JlYXRlcyB0aGUgaW5wdXQsIGl0IGRvZXNuJ3QgaGFuZGxlIHRoZSBhcmlhLWRlc2NyaWJlZGJ5IGNvcnJlY3RseS4uLlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYWxwaGFnb3YvYWNjZXNzaWJsZS1hdXRvY29tcGxldGUvaXNzdWVzLzU4OVxyXG5cclxuLy90b2RvOiB1c2UgdGhlIGluZGV4LmQudHMgZnJvbSBoZXJlLi4uXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbHBoYWdvdi9hY2Nlc3NpYmxlLWF1dG9jb21wbGV0ZS9pc3N1ZXMvNTM1XHJcbmRlY2xhcmUgY29uc3QgYWNjZXNzaWJsZUF1dG9jb21wbGV0ZTogYW55O1xyXG5cclxudHlwZSBDYWxsYmFjayA9IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZDtcclxuXHJcbndpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQgPSB3aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kIHx8IHt9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVBZGRBbm90aGVyKCk6IHZvaWQge1xyXG4gICAgLy90b2RvOiBzdXBwb3J0IG9wdGlvbnMgd2l0aCBzY29wZT9cclxuICAgIHZhciAkYWRkQW5vdGhlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tb2R1bGU9XCJmaC1hZGQtYW5vdGhlclwiXScpO1xyXG5cclxuICAgICRhZGRBbm90aGVycy5mb3JFYWNoKGZ1bmN0aW9uICgkYWRkQW5vdGhlcikge1xyXG5cdFx0bmV3IHdpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuQWRkQW5vdGhlcigkYWRkQW5vdGhlcik7XHJcbiAgICB9KTtcclxufVxyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG5cdHRoaXMuY29udGFpbmVyID0gJChjb250YWluZXIpO1xyXG5cclxuXHR0aGlzLmNhbGxiYWNrID0gbnVsbDtcclxuXHJcblx0aWYgKHRoaXMuY29udGFpbmVyLmRhdGEoJ2ZoLWFkZC1hbm90aGVyLWluaXRpYWxpc2VkJykpIHtcclxuXHRcdHJldHVyblxyXG5cdH1cclxuXHJcblx0dGhpcy5jb250YWluZXIuZGF0YSgnZmgtYWRkLWFub3RoZXItaW5pdGlhbGlzZWQnLCB0cnVlKTtcclxuXHJcblx0dGhpcy5jb250YWluZXIub24oJ2NsaWNrJywgJy5maC1hZGQtYW5vdGhlcl9fcmVtb3ZlLWJ1dHRvbicsICQucHJveHkodGhpcywgJ29uUmVtb3ZlQnV0dG9uQ2xpY2snKSk7XHJcblx0dGhpcy5jb250YWluZXIub24oJ2NsaWNrJywgJy5maC1hZGQtYW5vdGhlcl9fYWRkLWJ1dHRvbicsICQucHJveHkodGhpcywgJ29uQWRkQnV0dG9uQ2xpY2snKSk7XHJcblx0dGhpcy5jb250YWluZXIuZmluZCgnLmZoLWFkZC1hbm90aGVyX19hZGQtYnV0dG9uLCBmaC1hZGQtYW5vdGhlcl9fcmVtb3ZlLWJ1dHRvbicpLnByb3AoJ3R5cGUnLCAnYnV0dG9uJyk7XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLnNldENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrOiBDYWxsYmFjaykge1xyXG5cdHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxufTtcclxuXHJcbndpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuQWRkQW5vdGhlci5wcm90b3R5cGUub25BZGRCdXR0b25DbGljayA9IGZ1bmN0aW9uIChlKSB7XHJcblx0dmFyIGl0ZW0gPSB0aGlzLmdldE5ld0l0ZW0oKTtcclxuXHQvL3RoaXMudXBkYXRlQXR0cmlidXRlcyh0aGlzLmdldEl0ZW1zKCkubGVuZ3RoLCBpdGVtKTtcclxuXHR0aGlzLnJlc2V0SXRlbShpdGVtKTtcclxuXHR2YXIgZmlyc3RJdGVtID0gdGhpcy5nZXRJdGVtcygpLmZpcnN0KCk7XHJcblx0aWYgKCF0aGlzLmhhc1JlbW92ZUJ1dHRvbihmaXJzdEl0ZW0pKSB7XHJcblx0XHR0aGlzLmNyZWF0ZVJlbW92ZUJ1dHRvbihmaXJzdEl0ZW0pO1xyXG5cdH1cclxuXHR0aGlzLmdldEl0ZW1zKCkubGFzdCgpLmFmdGVyKGl0ZW0pO1xyXG5cdGl0ZW0uZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKS5maXJzdCgpLmZvY3VzKCk7XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLmhhc1JlbW92ZUJ1dHRvbiA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcblx0cmV0dXJuIGl0ZW0uZmluZCgnLmZoLWFkZC1hbm90aGVyX19yZW1vdmUtYnV0dG9uJykubGVuZ3RoO1xyXG59O1xyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyLnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRyZXR1cm4gdGhpcy5jb250YWluZXIuZmluZCgnLmZoLWFkZC1hbm90aGVyX19pdGVtJyk7XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLmdldE5ld0l0ZW0gPSBmdW5jdGlvbiAoKSB7IC8vOiBKUXVlcnk8SFRNTEVsZW1lbnQ+IC8vSFRNTEVsZW1lbnQge1xyXG4gICAgLy8gZ2V0IHRoZSBmaXJzdCBpdGVtIGFuZCBjbG9uZSBpdFxyXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCk7XHJcbiAgICBjb25zdCBpdGVtID0gaXRlbXNbMF0uY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xyXG5cclxuICAgIC8vIGZpbmQgdGhlIGF1dG9jb21wbGV0ZSB3cmFwcGVycyBhbmQgcmVtb3ZlIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBhZGRlZCBieSBhY2Nlc3NpYmxlLWF1dG9jb21wbGV0ZVxyXG4gICAgY29uc3QgYXV0b2NvbXBsZXRlV3JhcHBlcnMgPSBpdGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRvY29tcGxldGVfX3dyYXBwZXInKTtcclxuICAgIGF1dG9jb21wbGV0ZVdyYXBwZXJzLmZvckVhY2god3JhcHBlciA9PiB7XHJcbiAgICAgICAgaWYgKHdyYXBwZXIucGFyZW50Tm9kZS5wYXJlbnROb2RlKSB7XHJcblx0XHRcdHdyYXBwZXIucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdyYXBwZXIucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cdC8vdG9kbzogbmVlZCB0byBoYW5kbGUgbmFtZSBhbmQgaWQgYmVmb3JlIGVuaGFuY2luZyB0aGUgc2VsZWN0IGVsZW1lbnRzXHJcblxyXG5cdC8vdGhpcy51cGRhdGVBdHRyaWJ1dGVzKHRoaXMuZ2V0SXRlbXMoKS5sZW5ndGgsIGl0ZW0pO1xyXG5cclxuXHR2YXIgJGl0ZW0gPSAkKGl0ZW0pO1xyXG5cclxuXHR0aGlzLnVwZGF0ZUF0dHJpYnV0ZXMoaXRlbXMubGVuZ3RoLCAkaXRlbSk7XHJcblxyXG5cdC8vIGNhbGwgdGhlIGNhbGxiYWNrIHdoaWNoIG5lZWRzIHRvIGFwcGx5IGFjY2Vzc2liaWxpdHkgZW5oYW5jZW1lbnRzIHRvIHRoZSBuZXcgaXRlbVxyXG5cdGlmICh0eXBlb2YgdGhpcy5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0dGhpcy5jYWxsYmFjayhpdGVtKTtcclxuXHR9XHJcblxyXG5cdC8vdG9kbzogdGhpcyBpcyBqdXN0IGEgcG9jLCBhbmQgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgY2FsbGJhY2tcclxuICAgIGNvbnN0IGxhbmd1YWdlU2VsZWN0cyA9IGl0ZW0ucXVlcnlTZWxlY3RvckFsbChcIltpZF49J2xhbmd1YWdlLSddXCIpIGFzIE5vZGVMaXN0T2Y8SFRNTFNlbGVjdEVsZW1lbnQ+O1xyXG4gICAgbGFuZ3VhZ2VTZWxlY3RzLmZvckVhY2goc2VsZWN0ID0+IHtcclxuICAgICAgICBhY2Nlc3NpYmxlQXV0b2NvbXBsZXRlLmVuaGFuY2VTZWxlY3RFbGVtZW50KHtcclxuICAgICAgICAgICAgbmFtZTogJ2xhbmd1YWdlTmFtZScsXHJcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJycsXHJcbiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQ6IHNlbGVjdFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgcmVtb3ZlIGJ1dHRvbiBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgICBpZiAoIXRoaXMuaGFzUmVtb3ZlQnV0dG9uKCRpdGVtKSkge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUmVtb3ZlQnV0dG9uKCRpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJGl0ZW07XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLnVwZGF0ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcclxuXHRpdGVtLmZpbmQoJ1tkYXRhLW5hbWVdJykuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcclxuXHRcdHZhciBvcmlnaW5hbElkID0gZWwuaWRcclxuXHJcblx0XHRlbC5uYW1lID0gJChlbCkuYXR0cignZGF0YS1uYW1lJykucmVwbGFjZSgvJWluZGV4JS8sIGluZGV4KTtcclxuXHRcdGVsLmlkID0gJChlbCkuYXR0cignZGF0YS1pZCcpLnJlcGxhY2UoLyVpbmRleCUvLCBpbmRleCk7XHJcblxyXG5cdFx0dmFyIGxhYmVsID0gJChlbCkuc2libGluZ3MoJ2xhYmVsJylbMF0gfHwgJChlbCkucGFyZW50cygnbGFiZWwnKVswXSB8fCBpdGVtLmZpbmQoJ1tmb3I9XCInICsgb3JpZ2luYWxJZCArICdcIl0nKVswXTtcclxuXHRcdGxhYmVsLmh0bWxGb3IgPSBlbC5pZDtcclxuXHR9KTtcclxufTtcclxuXHJcbndpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuQWRkQW5vdGhlci5wcm90b3R5cGUuY3JlYXRlUmVtb3ZlQnV0dG9uID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHRpdGVtLmFwcGVuZCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJnb3Z1ay1idXR0b24gZ292dWstYnV0dG9uLS1zZWNvbmRhcnkgZmgtYWRkLWFub3RoZXJfX3JlbW92ZS1idXR0b25cIj5SZW1vdmU8L2J1dHRvbj4nKTtcclxufTtcclxuXHJcbndpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuQWRkQW5vdGhlci5wcm90b3R5cGUucmVzZXRJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHQvLyBhY2Nlc3NpYmlsZS1hdXRvY29tcGxldGUgYWRkcyBhbiBpbnB1dCAod2l0aG91dCBkYXRhLW5hbWUgb3IgZGF0YS1pZClcclxuXHQvLyBzbyB3ZSBibGFuayBhbGwgaW5wdXQgY29udHJvbHNcclxuICAgIGl0ZW0uZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcclxuICAgICAgICBpZiAoZWwudHlwZSA9PSAnY2hlY2tib3gnIHx8IGVsLnR5cGUgPT0gJ3JhZGlvJykge1xyXG4gICAgICAgICAgICBlbC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWwudmFsdWUgPSAnJztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbndpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuQWRkQW5vdGhlci5wcm90b3R5cGUub25SZW1vdmVCdXR0b25DbGljayA9IGZ1bmN0aW9uIChlKSB7XHJcblx0JChlLmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5maC1hZGQtYW5vdGhlcl9faXRlbScpLnJlbW92ZSgpO1xyXG5cdHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoKTtcclxuXHRpZiAoaXRlbXMubGVuZ3RoID09PSAxKSB7XHJcblx0XHRpdGVtcy5maW5kKCcuZmgtYWRkLWFub3RoZXJfX3JlbW92ZS1idXR0b24nKS5yZW1vdmUoKTtcclxuXHR9XHJcblx0aXRlbXMuZWFjaCgkLnByb3h5KGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcclxuXHRcdHRoaXMudXBkYXRlQXR0cmlidXRlcyhpbmRleCwgJChlbCkpO1xyXG5cdH0sIHRoaXMpKTtcclxuXHR0aGlzLmZvY3VzSGVhZGluZygpO1xyXG59O1xyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyLnByb3RvdHlwZS5mb2N1c0hlYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcblx0dGhpcy5jb250YWluZXIuZmluZCgnLmZoLWFkZC1hbm90aGVyX19oZWFkaW5nJykuZm9jdXMoKTtcclxufTtcclxuIl19
