// A version of the MOJ's add-another component what plays nice with the accessible autocomplete component.
// I did consider subclassing the MOJ's add-another component,
// but it would have been so coupled that it would've probably broken on an update of the MOJ library.
// So instead we forked it and made our own version.
window.FamilyHubsFrontend = window.FamilyHubsFrontend || {};
export function initializeAddAnother() {
    //todo: support options with scope?
    var $addAnothers = document.querySelectorAll('[data-module="fh-add-another"]');
    $addAnothers.forEach(function ($addAnother) {
        new window.FamilyHubsFrontend.AddAnother($addAnother);
    });
}
window.FamilyHubsFrontend.AddAnother = function (container) {
    this.container = $(container);
    if (this.container.data('fh-add-another-initialised')) {
        return;
    }
    this.container.data('fh-add-another-initialised', true);
    this.container.on('click', '.fh-add-another__remove-button', $.proxy(this, 'onRemoveButtonClick'));
    this.container.on('click', '.fh-add-another__add-button', $.proxy(this, 'onAddButtonClick'));
    this.container.find('.fh-add-another__add-button, fh-add-another__remove-button').prop('type', 'button');
};
window.FamilyHubsFrontend.AddAnother.prototype.onAddButtonClick = function (e) {
    var item = this.getNewItem();
    this.updateAttributes(this.getItems().length, item);
    this.resetItem(item);
    var firstItem = this.getItems().first();
    if (!this.hasRemoveButton(firstItem)) {
        this.createRemoveButton(firstItem);
    }
    this.getItems().last().after(item);
    item.find('input, textarea, select').first().focus();
};
window.FamilyHubsFrontend.AddAnother.prototype.hasRemoveButton = function (item) {
    return item.find('.fh-add-another__remove-button').length;
};
window.FamilyHubsFrontend.AddAnother.prototype.getItems = function () {
    return this.container.find('.fh-add-another__item');
};
window.FamilyHubsFrontend.AddAnother.prototype.getNewItem = function () {
    // Get the first item and clone it
    const items = this.getItems();
    const item = items[0].cloneNode(true);
    // Find the autocomplete wrappers and remove their parent
    const autocompleteWrappers = item.querySelectorAll('.autocomplete__wrapper');
    autocompleteWrappers.forEach(wrapper => {
        if (wrapper.parentNode) {
            wrapper.parentNode.removeChild(wrapper);
        }
    });
    // Enhance the select elements
    const languageSelects = item.querySelectorAll("[id^='language-']");
    languageSelects.forEach(select => {
        accessibleAutocomplete.enhanceSelectElement({
            name: 'languageName',
            defaultValue: '',
            selectElement: select
        });
    });
    // Create a remove button if it doesn't exist
    if (!this.hasRemoveButton(item)) {
        this.createRemoveButton(item);
    }
    return item;
};
/*
//window.FamilyHubsFrontend.AddAnother.prototype.getNewItem = function () {
//	//todo: before cloning, try finding the div with class autocomplete__wrapper, then removing it's parent
//	// then clone, then call the select enhance on the new select
//	// will need a way to pass a function in to do this//

//	var item = this.getItems().first().clone();
//	if (!this.hasRemoveButton(item)) {
//		this.createRemoveButton(item);
//	}
    //	return item;

    var item = this.getItems().first().clone();

    //const autocompleteWrappers = item.find('.autocomplete__wrapper');
    //var autocompleteWrappers = document.querySelectorAll('.autocomplete__wrapper');

 //       //if (autocompleteWrappers.length) {
 //           autocompleteWrappers.forEach(function(wrapper) {
 //               wrapper.parentNode.remove();
 //           });
 //       //}
 //       //}

    const autocompleteWrappers = item.find('.autocomplete__wrapper');
    if (autocompleteWrappers.length) {
        autocompleteWrappers.each(function () {
            $(this).parent().remove();
        });
    }

    //todo: just poc!
    const languageSelects = item[0].querySelectorAll("[id^='language-']") as NodeListOf<HTMLSelectElement>; // [id$='\\d+']");

    languageSelects.forEach(function (select) {
        accessibleAutocomplete.enhanceSelectElement({
            //defaultValue: select.value,
            //todo: does it default to name in html?
            //name: select.name,
            name: 'languageName',
            defaultValue: '',
            selectElement: select
        })
    });


    if (!this.hasRemoveButton(item)) {
        this.createRemoveButton(item);
    }
    return item;
};
*/
window.FamilyHubsFrontend.AddAnother.prototype.getNewItem = function () {
    // Get the first item and clone it
    const items = this.getItems();
    const item = items[0].cloneNode(true);
    // Find the autocomplete wrappers and remove their parent
    const autocompleteWrappers = item.querySelectorAll('.autocomplete__wrapper');
    autocompleteWrappers.forEach(wrapper => {
        if (wrapper.parentNode) {
            wrapper.parentNode.removeChild(wrapper);
        }
    });
    // Enhance the select elements
    const languageSelects = item.querySelectorAll("[id^='language-']");
    languageSelects.forEach(select => {
        accessibleAutocomplete.enhanceSelectElement({
            name: 'languageName',
            defaultValue: '',
            selectElement: select
        });
    });
    // Create a remove button if it doesn't exist
    if (!this.hasRemoveButton(item)) {
        this.createRemoveButton(item);
    }
    return item;
};
window.FamilyHubsFrontend.AddAnother.prototype.updateAttributes = function (index, item) {
    item.find('[data-name]').each(function (i, el) {
        var originalId = el.id;
        el.name = $(el).attr('data-name').replace(/%index%/, index);
        el.id = $(el).attr('data-id').replace(/%index%/, index);
        var label = $(el).siblings('label')[0] || $(el).parents('label')[0] || item.find('[for="' + originalId + '"]')[0];
        label.htmlFor = el.id;
    });
};
window.FamilyHubsFrontend.AddAnother.prototype.createRemoveButton = function (item) {
    item.append('<button type="button" class="govuk-button govuk-button--secondary fh-add-another__remove-button">Remove</button>');
};
window.FamilyHubsFrontend.AddAnother.prototype.resetItem = function (item) {
    // accessibile-autocomplete adds an input (without data-name or data-id)
    // so we blank all input controls
    item.find('input, textarea, select').each(function (index, el) {
        if (el.type == 'checkbox' || el.type == 'radio') {
            el.checked = false;
        }
        else {
            el.value = '';
        }
    });
};
window.FamilyHubsFrontend.AddAnother.prototype.onRemoveButtonClick = function (e) {
    $(e.currentTarget).parents('.fh-add-another__item').remove();
    var items = this.getItems();
    if (items.length === 1) {
        items.find('.fh-add-another__remove-button').remove();
    }
    items.each($.proxy(function (index, el) {
        this.updateAttributes(index, $(el));
    }, this));
    this.focusHeading();
};
window.FamilyHubsFrontend.AddAnother.prototype.focusHeading = function () {
    this.container.find('.fh-add-another__heading').focus();
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
