// A version of the MOJ's add-another component that plays nice with the accessible autocomplete component.
// I did consider subclassing the MOJ's add-another component,
// but it would have been so coupled that it would've probably broken on an update of the MOJ library.
// So instead we forked it and made our own version.
//todo: when accessible-autocomplete creates the input, it doesn't handle the aria-describedby correctly...
// https://github.com/alphagov/accessible-autocomplete/issues/589
window.FamilyHubsFrontend = window.FamilyHubsFrontend || {};
export function initializeAddAnother() {
    //todo: support options with scope?
    var $addAnothers = document.querySelectorAll('[data-module="fh-add-another"]');
    $addAnothers.forEach(function ($addAnother) {
        new window.FamilyHubsFrontend.AddAnother($addAnother);
    });
}
window.FamilyHubsFrontend.AddAnother = function (container) {
    this.container = $(container);
    this.index = 0;
    if (this.container.data('fh-add-another-initialised')) {
        return;
    }
    //todo: this is a bit hacky - find a better way to do this
    var functionName = container.getAttribute('data-fh-add-another-callback');
    this.callback = null;
    document.addEventListener('DOMContentLoaded', function () {
        if (typeof window[functionName] === 'function') {
            this.callback = window[functionName];
            this.callback(container);
        }
    }.bind(this));
    this.container.data('fh-add-another-initialised', true);
    this.container.on('click', '.fh-add-another__remove-button', $.proxy(this, 'onRemoveButtonClick'));
    this.container.on('click', '.fh-add-another__add-button', $.proxy(this, 'onAddButtonClick'));
    this.container.find('.fh-add-another__add-button, fh-add-another__remove-button').prop('type', 'submit');
};
window.FamilyHubsFrontend.AddAnother.prototype.onAddButtonClick = function (e) {
    var item = this.getNewItem();
    var firstItem = this.getItems().first();
    if (!this.hasRemoveButton(firstItem)) {
        this.createRemoveButton(firstItem);
    }
    this.getItems().last().after(item);
    item.find('input, textarea, select').first().focus();
    e.preventDefault();
};
window.FamilyHubsFrontend.AddAnother.prototype.hasRemoveButton = function (item) {
    return item.find('.fh-add-another__remove-button').length;
};
window.FamilyHubsFrontend.AddAnother.prototype.getItems = function () {
    return this.container.find('.fh-add-another__item');
};
window.FamilyHubsFrontend.AddAnother.prototype.getNewItem = function () {
    // get the first item and clone it
    const items = this.getItems();
    const item = items[0].cloneNode(true);
    // find the autocomplete wrappers and remove the elements that are added by accessible-autocomplete
    const autocompleteWrappers = item.querySelectorAll('.autocomplete__wrapper');
    autocompleteWrappers.forEach(wrapper => {
        if (wrapper.parentNode.parentNode) {
            wrapper.parentNode.parentNode.removeChild(wrapper.parentNode);
        }
    });
    var $item = $(item);
    // update the id and name attributes
    this.updateAttributes(++this.index, $item);
    this.resetItem($item);
    // call the callback which needs to apply accessibility-autocomplete enhancements to the new item
    if (typeof this.callback === 'function') {
        this.callback(item);
    }
    // Create a remove button if it doesn't exist
    if (!this.hasRemoveButton($item)) {
        this.createRemoveButton($item);
    }
    return $item;
};
window.FamilyHubsFrontend.AddAnother.prototype.updateAttributes = function (index, item) {
    item.find('[data-name]').each(function (i, el) {
        var originalId = el.id;
        el.name = $(el).attr('data-name').replace(/%index%/, index);
        el.id = $(el).attr('data-id').replace(/%index%/, index);
        var label = $(el).siblings('label')[0] || $(el).parents('label')[0] || item.find('[for="' + originalId + '"]')[0];
        label.htmlFor = el.id;
    });
};
window.FamilyHubsFrontend.AddAnother.prototype.createRemoveButton = function (item) {
    item.append('<button type="submit" class="govuk-button govuk-button--secondary fh-add-another__remove-button">Remove</button>');
};
window.FamilyHubsFrontend.AddAnother.prototype.resetItem = function (item) {
    // accessibile-autocomplete adds an input (without data-name or data-id)
    // so we blank all input controls
    item.find('input, textarea, select').each(function (index, el) {
        if (el.type == 'checkbox' || el.type == 'radio') {
            el.checked = false;
        }
        else {
            el.value = '';
        }
    });
};
window.FamilyHubsFrontend.AddAnother.prototype.onRemoveButtonClick = function (e) {
    $(e.currentTarget).parents('.fh-add-another__item').remove();
    var items = this.getItems();
    if (items.length === 1) {
        items.find('.fh-add-another__remove-button').remove();
    }
    this.focusHeading();
    e.preventDefault();
};
window.FamilyHubsFrontend.AddAnother.prototype.focusHeading = function () {
    this.container.find('.fh-add-another__heading').focus();
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWRkLWFub3RoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkdBQTJHO0FBQzNHLDhEQUE4RDtBQUM5RCxzR0FBc0c7QUFDdEcsb0RBQW9EO0FBRXBELDJHQUEyRztBQUMzRyxpRUFBaUU7QUFFakUsTUFBTSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7QUFFNUQsTUFBTSxVQUFVLG9CQUFvQjtJQUNoQyxtQ0FBbUM7SUFDbkMsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFFbEYsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFdBQVc7UUFDekMsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEdBQUcsVUFBVSxTQUFTO0lBQ3pELElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRWYsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLENBQUM7UUFDdkQsT0FBTTtJQUNQLENBQUM7SUFFRCwwREFBMEQ7SUFDMUQsSUFBSSxZQUFZLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBRTFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRTtRQUM3QyxJQUFJLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUIsQ0FBQztJQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVkLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXhELElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDbkcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUM3RixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyw0REFBNEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDMUcsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDO0lBQzVFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUU3QixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsVUFBVSxJQUFJO0lBQzlFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMzRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUc7SUFDekQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRztJQUN4RCxrQ0FBa0M7SUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFnQixDQUFDO0lBRXJELG1HQUFtRztJQUNuRyxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzdFLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNuQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDekMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFTixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEIsb0NBQW9DO0lBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV0QixpR0FBaUc7SUFDakcsSUFBSSxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUUsNkNBQTZDO0lBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLEtBQUssRUFBRSxJQUFJO0lBQ3RGLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUU7UUFDNUMsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQTtRQUV0QixFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RCxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xILEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFVBQVUsSUFBSTtJQUNqRixJQUFJLENBQUMsTUFBTSxDQUFDLGtIQUFrSCxDQUFDLENBQUM7QUFDakksQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsSUFBSTtJQUN4RSx3RUFBd0U7SUFDeEUsaUNBQWlDO0lBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsRUFBRTtRQUMvRCxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksVUFBVSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksT0FBTyxFQUFFLENBQUM7WUFDakQsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEIsQ0FBQzthQUNJLENBQUM7WUFDSSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNsQixDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxVQUFVLENBQUM7SUFDL0UsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3RCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2RCxDQUFDO0lBQ0QsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUc7SUFDN0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN6RCxDQUFDLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9hZGQtYW5vdGhlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEEgdmVyc2lvbiBvZiB0aGUgTU9KJ3MgYWRkLWFub3RoZXIgY29tcG9uZW50IHRoYXQgcGxheXMgbmljZSB3aXRoIHRoZSBhY2Nlc3NpYmxlIGF1dG9jb21wbGV0ZSBjb21wb25lbnQuXHJcbi8vIEkgZGlkIGNvbnNpZGVyIHN1YmNsYXNzaW5nIHRoZSBNT0oncyBhZGQtYW5vdGhlciBjb21wb25lbnQsXHJcbi8vIGJ1dCBpdCB3b3VsZCBoYXZlIGJlZW4gc28gY291cGxlZCB0aGF0IGl0IHdvdWxkJ3ZlIHByb2JhYmx5IGJyb2tlbiBvbiBhbiB1cGRhdGUgb2YgdGhlIE1PSiBsaWJyYXJ5LlxyXG4vLyBTbyBpbnN0ZWFkIHdlIGZvcmtlZCBpdCBhbmQgbWFkZSBvdXIgb3duIHZlcnNpb24uXHJcblxyXG4vL3RvZG86IHdoZW4gYWNjZXNzaWJsZS1hdXRvY29tcGxldGUgY3JlYXRlcyB0aGUgaW5wdXQsIGl0IGRvZXNuJ3QgaGFuZGxlIHRoZSBhcmlhLWRlc2NyaWJlZGJ5IGNvcnJlY3RseS4uLlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYWxwaGFnb3YvYWNjZXNzaWJsZS1hdXRvY29tcGxldGUvaXNzdWVzLzU4OVxyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZCA9IHdpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQgfHwge307XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUFkZEFub3RoZXIoKTogdm9pZCB7XHJcbiAgICAvL3RvZG86IHN1cHBvcnQgb3B0aW9ucyB3aXRoIHNjb3BlP1xyXG4gICAgdmFyICRhZGRBbm90aGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1vZHVsZT1cImZoLWFkZC1hbm90aGVyXCJdJyk7XHJcblxyXG5cdCRhZGRBbm90aGVycy5mb3JFYWNoKGZ1bmN0aW9uICgkYWRkQW5vdGhlcikge1xyXG5cdFx0bmV3IHdpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuQWRkQW5vdGhlcigkYWRkQW5vdGhlcik7XHJcbiAgICB9KTtcclxufVxyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG5cdHRoaXMuY29udGFpbmVyID0gJChjb250YWluZXIpO1xyXG5cdHRoaXMuaW5kZXggPSAwO1xyXG5cclxuXHRpZiAodGhpcy5jb250YWluZXIuZGF0YSgnZmgtYWRkLWFub3RoZXItaW5pdGlhbGlzZWQnKSkge1xyXG5cdFx0cmV0dXJuXHJcblx0fVxyXG5cclxuXHQvL3RvZG86IHRoaXMgaXMgYSBiaXQgaGFja3kgLSBmaW5kIGEgYmV0dGVyIHdheSB0byBkbyB0aGlzXHJcblx0dmFyIGZ1bmN0aW9uTmFtZSA9IGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmgtYWRkLWFub3RoZXItY2FsbGJhY2snKTtcclxuXHJcblx0dGhpcy5jYWxsYmFjayA9IG51bGw7XHJcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuXHRcdGlmICh0eXBlb2Ygd2luZG93W2Z1bmN0aW9uTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0dGhpcy5jYWxsYmFjayA9IHdpbmRvd1tmdW5jdGlvbk5hbWVdO1xyXG5cdFx0XHR0aGlzLmNhbGxiYWNrKGNvbnRhaW5lcik7XHJcblx0XHR9XHJcblx0fS5iaW5kKHRoaXMpKTtcclxuXHJcblx0dGhpcy5jb250YWluZXIuZGF0YSgnZmgtYWRkLWFub3RoZXItaW5pdGlhbGlzZWQnLCB0cnVlKTtcclxuXHJcblx0dGhpcy5jb250YWluZXIub24oJ2NsaWNrJywgJy5maC1hZGQtYW5vdGhlcl9fcmVtb3ZlLWJ1dHRvbicsICQucHJveHkodGhpcywgJ29uUmVtb3ZlQnV0dG9uQ2xpY2snKSk7XHJcblx0dGhpcy5jb250YWluZXIub24oJ2NsaWNrJywgJy5maC1hZGQtYW5vdGhlcl9fYWRkLWJ1dHRvbicsICQucHJveHkodGhpcywgJ29uQWRkQnV0dG9uQ2xpY2snKSk7XHJcblx0dGhpcy5jb250YWluZXIuZmluZCgnLmZoLWFkZC1hbm90aGVyX19hZGQtYnV0dG9uLCBmaC1hZGQtYW5vdGhlcl9fcmVtb3ZlLWJ1dHRvbicpLnByb3AoJ3R5cGUnLCAnc3VibWl0Jyk7XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLm9uQWRkQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG5cdHZhciBpdGVtID0gdGhpcy5nZXROZXdJdGVtKCk7XHJcblxyXG5cdHZhciBmaXJzdEl0ZW0gPSB0aGlzLmdldEl0ZW1zKCkuZmlyc3QoKTtcclxuXHRpZiAoIXRoaXMuaGFzUmVtb3ZlQnV0dG9uKGZpcnN0SXRlbSkpIHtcclxuXHRcdHRoaXMuY3JlYXRlUmVtb3ZlQnV0dG9uKGZpcnN0SXRlbSk7XHJcblx0fVxyXG5cdHRoaXMuZ2V0SXRlbXMoKS5sYXN0KCkuYWZ0ZXIoaXRlbSk7XHJcblx0aXRlbS5maW5kKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpLmZpcnN0KCkuZm9jdXMoKTtcclxuXHRlLnByZXZlbnREZWZhdWx0KCk7XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLmhhc1JlbW92ZUJ1dHRvbiA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcblx0cmV0dXJuIGl0ZW0uZmluZCgnLmZoLWFkZC1hbm90aGVyX19yZW1vdmUtYnV0dG9uJykubGVuZ3RoO1xyXG59O1xyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyLnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRyZXR1cm4gdGhpcy5jb250YWluZXIuZmluZCgnLmZoLWFkZC1hbm90aGVyX19pdGVtJyk7XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLmdldE5ld0l0ZW0gPSBmdW5jdGlvbiAoKSB7IC8vOiBKUXVlcnk8SFRNTEVsZW1lbnQ+IC8vSFRNTEVsZW1lbnQge1xyXG4gICAgLy8gZ2V0IHRoZSBmaXJzdCBpdGVtIGFuZCBjbG9uZSBpdFxyXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCk7XHJcbiAgICBjb25zdCBpdGVtID0gaXRlbXNbMF0uY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xyXG5cclxuICAgIC8vIGZpbmQgdGhlIGF1dG9jb21wbGV0ZSB3cmFwcGVycyBhbmQgcmVtb3ZlIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBhZGRlZCBieSBhY2Nlc3NpYmxlLWF1dG9jb21wbGV0ZVxyXG4gICAgY29uc3QgYXV0b2NvbXBsZXRlV3JhcHBlcnMgPSBpdGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRvY29tcGxldGVfX3dyYXBwZXInKTtcclxuICAgIGF1dG9jb21wbGV0ZVdyYXBwZXJzLmZvckVhY2god3JhcHBlciA9PiB7XHJcbiAgICAgICAgaWYgKHdyYXBwZXIucGFyZW50Tm9kZS5wYXJlbnROb2RlKSB7XHJcblx0XHRcdHdyYXBwZXIucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdyYXBwZXIucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cdHZhciAkaXRlbSA9ICQoaXRlbSk7XHJcblxyXG5cdC8vIHVwZGF0ZSB0aGUgaWQgYW5kIG5hbWUgYXR0cmlidXRlc1xyXG5cdHRoaXMudXBkYXRlQXR0cmlidXRlcygrK3RoaXMuaW5kZXgsICRpdGVtKTtcclxuXHJcblx0dGhpcy5yZXNldEl0ZW0oJGl0ZW0pO1xyXG5cclxuXHQvLyBjYWxsIHRoZSBjYWxsYmFjayB3aGljaCBuZWVkcyB0byBhcHBseSBhY2Nlc3NpYmlsaXR5LWF1dG9jb21wbGV0ZSBlbmhhbmNlbWVudHMgdG8gdGhlIG5ldyBpdGVtXHJcblx0aWYgKHR5cGVvZiB0aGlzLmNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHR0aGlzLmNhbGxiYWNrKGl0ZW0pO1xyXG5cdH1cclxuXHJcbiAgICAvLyBDcmVhdGUgYSByZW1vdmUgYnV0dG9uIGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuICAgIGlmICghdGhpcy5oYXNSZW1vdmVCdXR0b24oJGl0ZW0pKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVSZW1vdmVCdXR0b24oJGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAkaXRlbTtcclxufTtcclxuXHJcbndpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuQWRkQW5vdGhlci5wcm90b3R5cGUudXBkYXRlQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xyXG5cdGl0ZW0uZmluZCgnW2RhdGEtbmFtZV0nKS5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xyXG5cdFx0dmFyIG9yaWdpbmFsSWQgPSBlbC5pZFxyXG5cclxuXHRcdGVsLm5hbWUgPSAkKGVsKS5hdHRyKCdkYXRhLW5hbWUnKS5yZXBsYWNlKC8laW5kZXglLywgaW5kZXgpO1xyXG5cdFx0ZWwuaWQgPSAkKGVsKS5hdHRyKCdkYXRhLWlkJykucmVwbGFjZSgvJWluZGV4JS8sIGluZGV4KTtcclxuXHJcblx0XHR2YXIgbGFiZWwgPSAkKGVsKS5zaWJsaW5ncygnbGFiZWwnKVswXSB8fCAkKGVsKS5wYXJlbnRzKCdsYWJlbCcpWzBdIHx8IGl0ZW0uZmluZCgnW2Zvcj1cIicgKyBvcmlnaW5hbElkICsgJ1wiXScpWzBdO1xyXG5cdFx0bGFiZWwuaHRtbEZvciA9IGVsLmlkO1xyXG5cdH0pO1xyXG59O1xyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyLnByb3RvdHlwZS5jcmVhdGVSZW1vdmVCdXR0b24gPSBmdW5jdGlvbiAoaXRlbSkge1xyXG5cdGl0ZW0uYXBwZW5kKCc8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImdvdnVrLWJ1dHRvbiBnb3Z1ay1idXR0b24tLXNlY29uZGFyeSBmaC1hZGQtYW5vdGhlcl9fcmVtb3ZlLWJ1dHRvblwiPlJlbW92ZTwvYnV0dG9uPicpO1xyXG59O1xyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyLnByb3RvdHlwZS5yZXNldEl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xyXG5cdC8vIGFjY2Vzc2liaWxlLWF1dG9jb21wbGV0ZSBhZGRzIGFuIGlucHV0ICh3aXRob3V0IGRhdGEtbmFtZSBvciBkYXRhLWlkKVxyXG5cdC8vIHNvIHdlIGJsYW5rIGFsbCBpbnB1dCBjb250cm9sc1xyXG4gICAgaXRlbS5maW5kKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbCkge1xyXG5cdFx0aWYgKGVsLnR5cGUgPT0gJ2NoZWNrYm94JyB8fCBlbC50eXBlID09ICdyYWRpbycpIHtcclxuXHRcdFx0ZWwuY2hlY2tlZCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLnZhbHVlID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLkFkZEFub3RoZXIucHJvdG90eXBlLm9uUmVtb3ZlQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG5cdCQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuZmgtYWRkLWFub3RoZXJfX2l0ZW0nKS5yZW1vdmUoKTtcclxuXHR2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCk7XHJcblx0aWYgKGl0ZW1zLmxlbmd0aCA9PT0gMSkge1xyXG5cdFx0aXRlbXMuZmluZCgnLmZoLWFkZC1hbm90aGVyX19yZW1vdmUtYnV0dG9uJykucmVtb3ZlKCk7XHJcblx0fVxyXG5cdHRoaXMuZm9jdXNIZWFkaW5nKCk7XHJcblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG59O1xyXG5cclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5BZGRBbm90aGVyLnByb3RvdHlwZS5mb2N1c0hlYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcblx0dGhpcy5jb250YWluZXIuZmluZCgnLmZoLWFkZC1hbm90aGVyX19oZWFkaW5nJykuZm9jdXMoKTtcclxufTtcclxuIl19
